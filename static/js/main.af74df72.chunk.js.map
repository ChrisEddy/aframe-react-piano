{"version":3,"sources":["WhiteKey.js","BlackKey.js","Octave.js","App.js","serviceWorker.js","index.js"],"names":["WhiteKey","props","color","depth","height","width","position","whiteKey_X_Position","event-set__enter","event-set__leave","playnote","note","octave","oculus-touch-controls","x-button-listener","BlackKey","blackKey_X_Position","Octave","startingPosition","whiteKey","blackKey","notes","map","index","key","App","className","id","href","vr-mode-ui","inspector","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAgBeA,G,UAfE,SAAAC,GACb,OACI,oCACI,2BAAOC,MAAM,SAASC,MAAM,MAAMC,OAAO,IAAIC,MAAM,MACnDC,SAAUL,EAAMM,oBAChBC,mBAAiB,oCACjBC,mBAAiB,oCACjBC,SAAUT,EAAMU,KAAOV,EAAMW,OAC7BC,yBAAA,EACAC,oBAAmBb,EAAMU,KAAOV,EAAMW,YCMnCG,EAfE,SAAAd,GACb,OACI,oCACI,2BAAOC,MAAM,QAAQC,MAAM,MAAMC,OAAO,IAAIC,MAAM,MAC9CC,SAAUL,EAAMe,oBAChBR,mBAAiB,qCACjBC,mBAAiB,mCACjBC,SAAUT,EAAMU,KAAOV,EAAMW,OAC7BC,yBAAA,EACAC,oBAAmBb,EAAMU,KAAOV,EAAMW,WCyBvCK,EA/BA,SAAAhB,GAEX,IAAIM,EAAsBN,EAAMiB,iBAAiBC,SAC7CH,EAAsBf,EAAMiB,iBAAiBE,SAEjD,OACInB,EAAMoB,MAAMC,KAAI,SAACX,EAAMY,GAGnB,OAFAP,GAA4C,GAC5CT,GAA4C,GAExC,oCAEiB,MAATI,GAAyB,MAATA,EAChB,kBAAC,EAAD,eACIA,KAAMA,EAAO,IACba,IAAKD,EAAQ,WACbP,oBAAmB,UAAKA,EAAL,cACff,IACH,KAET,kBAAC,EAAD,eACIuB,IAAKD,EAAQ,WACbhB,oBAAmB,UAAKA,EAAL,WACnBI,KAAMA,GACFV,SCWbwB,EAnCH,WACV,IAAMJ,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGzCH,GAAoB,GAExB,OACE,yBAAKQ,UAAU,OACP,uBAAGC,GAAG,gBAAgBC,KAAK,KAA3B,YAEN,6BAASC,aAAW,gCAAgCC,UAAU,6FARlD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAWpCR,KAAI,SAACV,EAAQW,GAEnB,OADAL,GAAsC,IAC/B,kBAAC,EAAD,CACCN,OAAQA,EACRS,MAAOA,EACPG,IAAKD,EACLL,iBAAkB,CAAC,SAAYA,EAAkB,SAAYA,EAAmB,SAM5F,kCACE,uCClBUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.af74df72.chunk.js","sourcesContent":["import React from 'react';\nconst WhiteKey = props => {\n    return (\n        <>\n            <a-box color=\"tomato\" depth=\"0.1\" height=\"4\" width=\"0.5\" \n            position={props.whiteKey_X_Position} \n            event-set__enter=\"_event: mouseenter; color: yellow\"\n            event-set__leave=\"_event: mouseleave; color: tomato\"\n            playnote={props.note + props.octave}\n            oculus-touch-controls \n            x-button-listener={props.note + props.octave}\n            >\n            </a-box>\n        </>\n    )\n}\nexport default WhiteKey;","import React from 'react';\nconst BlackKey = props => {\n    return (\n        <>\n            <a-box color=\"black\" depth=\"0.1\" height=\"2\" width=\"0.5\" \n                position={props.blackKey_X_Position} \n                event-set__enter=\"_event: mouseenter; color: #8FF7FF\"\n                event-set__leave=\"_event: mouseleave; color: black\"\n                playnote={props.note + props.octave}\n                oculus-touch-controls \n                x-button-listener={props.note + props.octave}\n            >\n            </a-box>\n        </>\n    )\n}\nexport default BlackKey;","import React from 'react';\nimport WhiteKey from './WhiteKey';\nimport BlackKey from './BlackKey';\n\nconst Octave = props => {\n\n    let whiteKey_X_Position = props.startingPosition.whiteKey;\n    let blackKey_X_Position = props.startingPosition.blackKey;\n\n    return (\n        props.notes.map((note, index) => {\n            blackKey_X_Position = blackKey_X_Position + 0.6;\n            whiteKey_X_Position = whiteKey_X_Position + 0.6;\n            return (\n                <>\n                    {\n                        note !== \"E\" && note !== \"B\" ? \n                        <BlackKey \n                            note={note + \"#\"} \n                            key={index + \"blackKey\"} \n                            blackKey_X_Position={`${blackKey_X_Position} 1.5 -2.9`}\n                            {...props}\n                        /> : null\n                    }\n                    <WhiteKey \n                        key={index + \"whiteKey\"}\n                        whiteKey_X_Position={`${whiteKey_X_Position} 0.5 -3`}\n                        note={note}\n                        {...props}\n                    />\n                </>\n                )\n        })\n    )\n}\nexport default Octave;","import React from 'react';\nimport './App.css';\nimport Octave from './Octave';\n\nconst App = () => {\n  const notes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n  const octaves = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n\n  let startingPosition = -20;\n\n  return (\n    <div className=\"App\">\n            <a id=\"enterVRButton\" href=\"#\">Enter VR</a>\n\n      <a-scene vr-mode-ui=\"enterVRButton: #enterVRButton\" inspector=\"https://cdn.jsdelivr.net/gh/aframevr/aframe-inspector@master/dist/aframe-inspector.min.js\">\n\n        {\n          octaves.map((octave, index) => {\n            startingPosition = startingPosition + 4.2;\n            return <Octave \n                    octave={octave} \n                    notes={notes} \n                    key={index} \n                    startingPosition={{\"whiteKey\": startingPosition, \"blackKey\": startingPosition + 0.3}}\n                    />\n          })\n        }\n\n\n        <a-camera>\n          <a-cursor></a-cursor>\n        </a-camera>\n\n      </a-scene>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}